

# groups:
# - name: pave
#   jobs:
#   - terraform-pave
#   - terraform-destroy
# - name: opsman
#   jobs:
#   - create-opsman-and-configure-auth
#   - configure-director
#   - apply-director-changes
#   - export-installation
# - name: products
#   jobs:
#   - upload-and-stage-pas
#   - upload-and-stage-mysql
#   - upload-and-stage-metrics
#   - generate-mysql-configs
#   - configure-pas
#   - apply-product-changes
#   - generate-healthwatch-configs
#   - generate-metrics-configs
#   - configure-credhub
#   - export-final-installation
#   - upload-and-stage-credhub
#   - generate-pas-configs
#   - generate-credhub-configs
#   - configure-mysql
#   - configure-healthwatch
#   - upload-and-stage-healthwatch
#   - configure-metrics
# - name: stemcells
#   jobs:
#   - upload-healthwatch-stemcell
#   - upload-credhub-stemcell
#   - upload-pas-stemcell


resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final


resources:

- name: tf
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.tf.product_slug))
    product_version: ((products.tf.product_version))
    sort_by: semver

- name: opsman
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.opsman.product_slug))
    product_version: ((products.opsman.product_version))
    sort_by: semver

- name: pas
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.pas.product_slug))
    product_version: ((products.pas.product_version))
    sort_by: semver

- name: pas-stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.pas.stemcell.product_slug))
    product_version: ((products.pas.stemcell.product_version))
    sort_by: semver

- name: redis
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.redis.product_slug))
    product_version: ((products.redis.product_version))
    sort_by: semver

- name: redis-stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.redis.stemcell.product_slug))
    product_version: ((products.redis.stemcell.product_version))
    sort_by: semver


- name: mysql
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.mysql.product_slug))
    product_version: ((products.mysql.product_version))
    sort_by: semver

- name: metrics
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.metrics.product_slug))
    product_version: ((products.metrics.product_version))
    sort_by: semver

- name: rabbit
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.rabbit.product_slug))
    product_version: ((products.rabbit.product_version))
    sort_by: semver

- name: scs
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.scs.product_slug))
    product_version: ((products.scs.product_version))
    sort_by: semver

- name: pasw
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: ((products.pasw.product_globs))

- name: healthwatch
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.healthwatch.product_slug))
    product_version: ((products.healthwatch.product_version))
    sort_by: semver

- name: credhub
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.credhub.product_slug))
    product_version: ((products.credhub.product_version))
    sort_by: semver

- name: healthwatch-stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.healthwatch.stemcell.product_slug))
    product_version: ((products.healthwatch.stemcell.product_version))
    sort_by: semver

- name: credhub-stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.credhub.stemcell.product_slug))
    product_version: ((products.credhub.stemcell.product_version))
    sort_by: semver

- name: pasw-stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.pasw.stemcell.product_slug))
    product_version: ((products.pasw.stemcell.product_version))
    sort_by: semver

- name: installation
  type: s3
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region_name))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    bucket: ((s3.buckets.foundation))
    regexp: installation-after-(.*).zip

- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region_name))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    bucket: ((s3.buckets.platform_automation))
    regexp: .*tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region_name))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    bucket: ((s3.buckets.platform_automation))
    regexp: .*image-(.*).tgz

- name: configuration
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.configuration.uri))
    branch: master

- name: terraform
  type: terraform
  source:
    backend_type: s3
    backend_config:
      bucket: ((s3.buckets.pave))
      workspace_key_prefix: ((foundation))
      key: terraform.tfstate
      region: us-east-1
      access_key: ((s3.access_key_id))
      secret_key: ((s3.secret_access_key))
    env:
      AWS_ACCESS_KEY_ID: ((aws.access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws.secret_access_key))

# reusable stuff
credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: configuration
  params:
    CREDHUB_SERVER: ((credhub.server))
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_CLIENT: ((credhub.client))
    CREDHUB_SECRET: ((credhub.secret))
    PREFIX: /concourse/((foundation))
    INTERPOLATION_PATH: ((credhub.interpolate_folders))


rename-tf-source: &rename-tf-source
  config:
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: bash
    inputs:
      - name: tf
    outputs:
      - name: tf-source
    run:
      path: bash
      args:
      - "-c"
      - |
        mv tf/pivotal-cf-terraforming*/* tf-source

jobs:

- name: terraform-pave
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: tf
      params:
        globs:
        - "((products.tf.product_globs))"
        unpack: true
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: rename-folder
    <<: *rename-tf-source
  - put: terraform
    params:
      env_name: ((foundation))
      terraform_source: tf-source/terraforming-((platform))
      var_files: 
        - interpolated-files/((foundation))/vars/terraform.yml
      vars:
        ops_manager_vm: false

- name: terraform-destroy
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: tf
      params:
        globs:
        - "((products.tf.product_globs))"
        unpack: true
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: rename-folder
    <<: *rename-tf-source
  - put: terraform
    params:
      action: destroy
      env_name: ((foundation))
      terraform_source: tf-source/terraforming-((platform))
      var_files: 
        - interpolated-files/((foundation))/vars/terraform.yml
    get_params:
      action: destroy

- name: create-opsman-and-configure-auth
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [terraform-pave]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: opsman
      params:
        globs:
        - "((products.opsman.product_globs))"
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman
      state: configuration
      config: configuration
      vars: interpolated-files
    params:
      OPSMAN_CONFIG_FILE: ((foundation))/products/((products.opsman.product_slug)).yml
      VARS_FILES: vars/((foundation))/vars/((products.opsman.product_slug))-vars.yml
      STATE_FILE: ((foundation))/state/state.yml
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-state
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update state file: state.yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: interpolated-files
      config: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
      AUTH_CONFIG_FILE: ((foundation))/vars/config/auth.yml
    on_success: &make-director-config-commit
      do:
        - task: staged-director-config
          image: platform-automation-image
          file: platform-automation-tasks/tasks/staged-director-config.yml
          input_mapping:
            env: interpolated-files
          params:
            ENV_FILE: ((foundation))/vars/env/env.yml
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: director.yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/director-((products.opsman.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: director-((products.opsman.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true
    
- name: configure-director
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      passed: [create-opsman-and-configure-auth]
      trigger: true
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
      DIRECTOR_CONFIG_FILE: ((foundation))/products/director.yml
      VARS_FILES: vars/((foundation))/vars/director-vars.yml

- name: apply-director-changes
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      passed: [configure-director]
      params: {unpack: true}
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
    on_success: *make-director-config-commit

- name: export-installation
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [apply-director-changes]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
      INSTALLATION_FILE: installation-after-((products.opsman.product_slug))-((products.opsman.product_version)).zip
  - put: installation
    params:
      file: installation/installation-after-((products.opsman.product_slug))-((products.opsman.product_version)).zip

- name: upload-and-stage-pas
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      # trigger: true
      passed: [export-installation]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: pas
      params:
        globs:
        - "((products.pas.product_globs))"
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pas
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.pas.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: 
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pas.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pas.product_name))-((products.pas.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.pas.product_name))-((products.pas.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: upload-pas-stemcell
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [export-installation]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
    - get: pas-stemcell
      params:
        globs:
        - "((products.pas.stemcell.product_globs))"
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: pas-stemcell
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: upload-and-stage-redis
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      # trigger: true
      passed: [export-installation]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: redis
      params:
        globs:
        - "((products.redis.product_globs))"
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: redis
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: redis
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.redis.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: 
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.redis.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.redis.product_name))-((products.redis.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.redis.product_name))-((products.redis.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: upload-redis-stemcell
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [export-installation]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
    - get: redis-stemcell
      params:
        globs:
        - "((products.redis.stemcell.product_globs))"
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: redis-stemcell
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: upload-and-stage-pasw
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      # trigger: true
      passed: [export-installation]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: pasw
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pasw
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pasw
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.pasw.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: 
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pasw.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pasw.product_name))-((products.pasw.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.pasw.product_name))-((products.pasw.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: upload-pasw-stemcell
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [export-installation]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
    - get: pasw-stemcell
      params:
        globs:
        - "((products.pasw.stemcell.product_globs))"
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: pasw-stemcell
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: upload-and-stage-mysql
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      # trigger: true
      passed: [export-installation]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: mysql
      params:
        globs:
        - "((products.mysql.product_globs))"
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: mysql
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: mysql
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.mysql.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.mysql.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.mysql.product_name))-((products.mysql.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.mysql.product_name))-((products.mysql.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: upload-and-stage-metrics
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      # trigger: true
      passed: [export-installation]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: metrics
      params:
        globs:
        - "((products.metrics.product_globs))"
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: metrics
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: metrics
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.metrics.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.metrics.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.metrics.product_name))-((products.metrics.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.metrics.product_name))-((products.metrics.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: upload-and-stage-credhub
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      # trigger: true
      passed: [export-installation]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: credhub
      params:
        globs:
        - "((products.credhub.product_globs))"
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: credhub
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: credhub
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.credhub.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.credhub.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.credhub.product_name))-((products.credhub.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.credhub.product_name))-((products.credhub.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: upload-and-stage-healthwatch
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      # trigger: true
      passed: [export-installation]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: healthwatch
      params:
        globs:
        - "((products.healthwatch.product_globs))"
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: healthwatch
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: healthwatch
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.healthwatch.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.healthwatch.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.healthwatch.product_name))-((products.healthwatch.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.healthwatch.product_name))-((products.healthwatch.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: upload-and-stage-scs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      # trigger: true
      passed: [export-installation]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: scs
      params:
        globs:
        - "((products.scs.product_globs))"
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: scs
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: scs
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.scs.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.scs.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.scs.product_name))-((products.scs.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.scs.product_name))-((products.scs.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: upload-and-stage-rabbit
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      # trigger: true
      passed: [export-installation]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: rabbit
      params:
        globs:
        - "((products.rabbit.product_globs))"
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: rabbit
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: rabbit
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.rabbit.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.rabbit.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.rabbit.product_name))-((products.rabbit.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.rabbit.product_name))-((products.rabbit.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: upload-credhub-stemcell
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [export-installation]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
    - get: credhub-stemcell
      params:
        globs:
        - "((products.credhub.stemcell.product_globs))"
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: credhub-stemcell
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: upload-healthwatch-stemcell
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [export-installation]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
    - get: healthwatch-stemcell
      params:
        globs:
        - "((products.healthwatch.stemcell.product_globs))"
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: healthwatch-stemcell
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: generate-pas-configs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-pas]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: pas-staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.pas.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pas.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pas.product_name))-((products.pas.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.pas.product_name))-((products.pas.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: generate-redis-configs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-redis]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: redis-staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.redis.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.redis.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.redis.product_name))-((products.redis.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.redis.product_name))-((products.redis.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: generate-pasw-configs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-pasw]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: pasw-staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.pasw.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pasw.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pasw.product_name))-((products.pasw.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.pasw.product_name))-((products.pasw.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: generate-mysql-configs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-mysql]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: mysql-staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.mysql.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.mysql.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.mysql.product_name))-((products.mysql.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.mysql.product_name))-((products.mysql.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: generate-credhub-configs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-credhub]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: credhub-staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.credhub.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.credhub.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.credhub.product_name))-((products.credhub.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.credhub.product_name))-((products.credhub.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: generate-healthwatch-configs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-healthwatch]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: healthwatch-staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.healthwatch.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.healthwatch.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.healthwatch.product_name))-((products.healthwatch.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.healthwatch.product_name))-((products.healthwatch.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: generate-metrics-configs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-metrics]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: metrics-staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.metrics.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.metrics.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.metrics.product_name))-((products.metrics.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.metrics.product_name))-((products.metrics.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: generate-scs-configs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-scs]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: scs-staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.scs.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.scs.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.scs.product_name))-((products.scs.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.scs.product_name))-((products.scs.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: generate-rabbit-configs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-rabbit]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: rabbit-staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.rabbit.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.rabbit.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.rabbit.product_name))-((products.rabbit.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.rabbit.product_name))-((products.rabbit.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: configure-pas
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-pas-configs]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.pas.product_name)).yml
      VARS_FILES: vars/((foundation))/vars/((products.pas.product_name))-vars.yml
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: configure-redis
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-redis-configs]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.redis.product_name)).yml
      VARS_FILES: vars/((foundation))/vars/((products.redis.product_name))-vars.yml
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: configure-pasw
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-pasw-configs]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.pasw.product_name)).yml
      VARS_FILES: vars/((foundation))/vars/((products.pasw.product_name))-vars.yml
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: configure-mysql
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-mysql-configs]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.mysql.product_name)).yml
      VARS_FILES: vars/((foundation))/vars/((products.mysql.product_name))-vars.yml
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: configure-credhub
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-credhub-configs]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.credhub.product_name)).yml
      VARS_FILES: vars/((foundation))/vars/((products.credhub.product_name))-vars.yml
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: configure-healthwatch
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-healthwatch-configs]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.healthwatch.product_name)).yml
      VARS_FILES: vars/((foundation))/vars/((products.healthwatch.product_name))-vars.yml
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: configure-metrics
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-metrics-configs]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.metrics.product_name)).yml
      VARS_FILES: vars/((foundation))/vars/((products.metrics.product_name))-vars.yml
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: configure-scs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-scs-configs]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.scs.product_name)).yml
      VARS_FILES: vars/((foundation))/vars/((products.scs.product_name))-vars.yml
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: configure-rabbit
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-rabbit-configs]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.rabbit.product_name)).yml
      VARS_FILES: vars/((foundation))/vars/((products.rabbit.product_name))-vars.yml
      ENV_FILE: ((foundation))/vars/env/env.yml



- name: apply-product-changes
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [configure-pas,configure-pasw,configure-metrics,configure-healthwatch,configure-mysql,configure-credhub,configure-rabbit,configure-scs]
      #trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: apply-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  # - task: staged-config
  #   image: platform-automation-image
  #   file: platform-automation-tasks/tasks/staged-config.yml
  #   input_mapping:
  #     env: interpolated-files
  #   params:
  #     PRODUCT_NAME: ((product.product_name))
  #     ENV_FILE: ((foundation))/vars/env/env.yml
  #     SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
  #   on_success: *make-config-commit

- name: export-final-installation
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [apply-product-changes]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
      INSTALLATION_FILE: installation-after-apply.zip
  - put: installation
    params:
      file: installation/installation-after-apply.zip