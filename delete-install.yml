resources:
- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region_name))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    bucket: ((s3.buckets.platform_automation))
    regexp: .*tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region_name))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    bucket: ((s3.buckets.platform_automation))
    regexp: .*image-(.*).tgz

- name: configuration
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.configuration.uri))
    branch: master

credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: configuration
  params:
    CREDHUB_SERVER: ((credhub.server))
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_CLIENT: ((credhub.client))
    CREDHUB_SECRET: ((credhub.secret))
    PREFIX: /concourse/((foundation))
    INTERPOLATION_PATH: ((credhub.interpolate_folders))


jobs:
- name: delete-installation
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: delete-install
    image: platform-automation-image
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
    platform: linux
    inputs:
    - name: env
    run:
      path: bash
      args:
      - "-c"
      - |
        cat /var/version && echo ""
        set -eux
        om --env env/"${ENV_FILE}" -k curl --path /api/v0/staged/vm_extensions/web-lb-security-groups -x PUT -d \
        '{"name": "web-lb-security-groups", "cloud_properties": { "security_groups": ["web_lb_security_group", "vms_security_group"] }}'
        om  --env env/"${ENV_FILE}" -k curl --path /api/v0/staged/vm_extensions/ssh-lb-security-groups -x PUT -d \
        '{"name": "ssh-lb-security-groups", "cloud_properties": { "security_groups": ["ssh_lb_security_group", "vms_security_group"] }}'
        om --env env/"${ENV_FILE}" -k curl --path /api/v0/staged/vm_extensions/tcp-lb-security-groups -x PUT -d \
        '{"name": "tcp-lb-security-groups", "cloud_properties": { "security_groups": ["tcp_lb_security_group", "vms_security_group"] }}'

- name: delete-opsman
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [delete-installation]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}   
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: delete-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      state: configuration
      config: configuration
      vars: interpolated-files
    params:
      OPSMAN_CONFIG_FILE: ((foundation))/products/((product.product_slug)).yml
      VARS_FILES: vars/((foundation))/vars/((product.product_slug))-vars.yml
      STATE_FILE: ((foundation))/state/state.yml
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-state
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update state file: state.yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true
    