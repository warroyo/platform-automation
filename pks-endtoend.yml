

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final


resources:

- name: tf
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.tf.product_slug))
    product_version: ((products.tf.product_version))
    sort_by: semver

- name: opsman
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.opsman.product_slug))
    product_version: ((products.opsman.product_version))
    sort_by: semver

- name: pks
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.pks.product_slug))
    product_version: ((products.pks.product_version))
    sort_by: semver

- name: pks-stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.pks.stemcell.product_slug))
    product_version: ((products.pks.stemcell.product_version))
    sort_by: semver

- name: harbor
  type: pivnet
  source:
    api_token: ((pivnet.token))
    product_slug: ((products.harbor.product_slug))
    product_version: ((products.harbor.product_version))
    sort_by: semver

- name: harbor-stemcell
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((products.harbor.stemcell.product_slug))
    product_version: ((products.harbor.stemcell.product_version))
    sort_by: semver

- name: installation
  type: s3
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region_name))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    bucket: ((s3.buckets.foundation))
    regexp: installation-after-(.*).zip

- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region_name))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    bucket: ((s3.buckets.platform_automation))
    regexp: .*tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region_name))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    bucket: ((s3.buckets.platform_automation))
    regexp: .*image-(.*).tgz

- name: configuration
  type: git
  source:
    private_key: ((git.private_key))
    uri: ((git.configuration.uri))
    branch: master

- name: terraform
  type: terraform
  source:
    backend_type: s3
    backend_config:
      bucket: ((s3.buckets.pave))
      workspace_key_prefix: ((foundation))
      key: terraform.tfstate
      region: us-east-1
      access_key: ((s3.access_key_id))
      secret_key: ((s3.secret_access_key))
    env:
      AWS_ACCESS_KEY_ID: ((aws.access_key_id))
      AWS_SECRET_ACCESS_KEY: ((aws.secret_access_key))

# reusable stuff
credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: configuration
  params:
    CREDHUB_SERVER: ((credhub.server))
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_CLIENT: ((credhub.client))
    CREDHUB_SECRET: ((credhub.secret))
    PREFIX: /concourse/((foundation))
    INTERPOLATION_PATH: ((credhub.interpolate_folders))


rename-tf-source: &rename-tf-source
  config:
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: bash
    inputs:
      - name: tf
    outputs:
      - name: tf-source
    run:
      path: bash
      args:
      - "-c"
      - |
        mv tf/pivotal-cf-terraforming*/* tf-source

jobs:

- name: terraform-pave
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: tf
      params:
        globs:
        - "((products.tf.product_globs))"
        unpack: true
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: rename-folder
    <<: *rename-tf-source
  - put: terraform
    params:
      env_name: ((foundation))
      terraform_source: tf-source/terraforming-((platform))
      var_files: 
        - interpolated-files/((foundation))/vars/terraform.yml
      vars:
        ops_manager_vm: false

- name: terraform-destroy
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: tf
      params:
        globs:
        - "((products.tf.product_globs))"
        unpack: true
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: rename-folder
    <<: *rename-tf-source
  - put: terraform
    params:
      action: destroy
      env_name: ((foundation))
      terraform_source: tf-source/terraforming-((platform))
      var_files: 
        - interpolated-files/((foundation))/vars/terraform.yml
    get_params:
      action: destroy

- name: create-opsman-and-configure-auth
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [terraform-pave]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: opsman
      params:
        globs:
        - "((products.opsman.product_globs))"
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman
      state: configuration
      config: configuration
      vars: interpolated-files
    params:
      OPSMAN_CONFIG_FILE: ((foundation))/products/((products.opsman.product_slug)).yml
      VARS_FILES: vars/((foundation))/vars/((products.opsman.product_slug))-vars.yml
      STATE_FILE: ((foundation))/state/state.yml
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-state
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update state file: state.yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: interpolated-files
      config: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
      AUTH_CONFIG_FILE: ((foundation))/vars/config/auth.yml
    on_success: &make-director-config-commit
      do:
        - task: staged-director-config
          image: platform-automation-image
          file: platform-automation-tasks/tasks/staged-director-config.yml
          input_mapping:
            env: interpolated-files
          params:
            ENV_FILE: ((foundation))/vars/env/env.yml
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: director.yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/director-((products.opsman.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: director-((products.opsman.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true
    
- name: configure-director
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      passed: [create-opsman-and-configure-auth]
      trigger: true
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
      DIRECTOR_CONFIG_FILE: ((foundation))/products/director.yml
      VARS_FILES: vars/((foundation))/vars/director-vars.yml

- name: apply-director-changes
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      passed: [configure-director]
      params: {unpack: true}
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
    on_success: *make-director-config-commit

- name: export-installation
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [apply-director-changes]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
      INSTALLATION_FILE: installation-after-((products.opsman.product_slug))-((products.opsman.product_version)).zip
  - put: installation
    params:
      file: installation/installation-after-((products.opsman.product_slug))-((products.opsman.product_version)).zip

- name: upload-and-stage-pks
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      # trigger: true
      passed: [export-installation]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: pks
      params:
        globs:
        - "((products.pks.product_globs))"
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pks
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pks
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.pks.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: 
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pks.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pks.product_name))-((products.pks.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.pks.product_name))-((products.pks.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: upload-and-stage-harbor
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      # trigger: true
      passed: [export-installation]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: harbor
      params:
        globs:
        - "((products.harbor.product_globs))"
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: harbor
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: harbor
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.harbor.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success: 
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.harbor.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.harbor.product_name))-((products.harbor.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add product config: ((products.harbor.product_name))-((products.harbor.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true

- name: upload-pks-stemcell
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [export-installation]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
    - get: pks-stemcell
      params:
        globs:
        - "((products.pks.stemcell.product_globs))"
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: pks-stemcell
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: upload-harbor-stemcell
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [export-installation]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
    - get: harbor-stemcell
      params:
        globs:
        - "((products.harbor.stemcell.product_globs))"
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: upload-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: harbor-stemcell
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: generate-pks-configs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-pks]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: pks-staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.pks.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.pks.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.pks.product_name))-((products.pks.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.pks.product_name))-((products.pks.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true


- name: generate-harbor-configs
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [upload-and-stage-harbor]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: harbor-staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: ((products.harbor.product_name))
      ENV_FILE: ((foundation))/vars/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true
    on_success:
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-config
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: ((products.harbor.product_name)).yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/((products.harbor.product_name))-((products.harbor.product_version)).yml
            GIT_AUTHOR_EMAIL: ((git.user.email))
            GIT_AUTHOR_NAME: ((git.user.username))
            COMMIT_MESSAGE: "Add or update product config: ((products.harbor.product_name))-((products.harbor.product_version)).yml"
        - put: configuration
          params:
            repository: configuration-commit
            merge: true


- name: configure-pks
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-pks-configs]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.pks.product_name)).yml
      VARS_FILES: vars/((foundation))/vars/((products.pks.product_name))-vars.yml
      ENV_FILE: ((foundation))/vars/env/env.yml

- name: configure-harbor
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [generate-harbor-configs]
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: configure-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/products/((products.harbor.product_name)).yml
      VARS_FILES: vars/((foundation))/vars/((products.harbor.product_name))-vars.yml
      ENV_FILE: ((foundation))/vars/env/env.yml


- name: apply-product-changes
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [configure-pks, configure-harbor]
      #trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: apply-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml


- name: export-final-installation
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true}
      passed: [apply-product-changes]
      trigger: true
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/vars/env/env.yml
      INSTALLATION_FILE: installation-after-apply.zip
  - put: installation
    params:
      file: installation/installation-after-apply.zip